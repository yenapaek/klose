{"version":3,"sources":["src/components/Hooks/usefulFunctions.js","src/components/Dashboard/AddReminder.js","src/components/Reminder/ReminderDetail.js","src/components/Dashboard/LandingView.js","src/components/Dashboard/ReminderItem.js","src/components/Dashboard/ReminderList.js","src/components/Dashboard/Dashboard.js","App.js"],"names":["deleteReminder","userID","id","formData","FormData","append","axios","post","then","res","setState","reminders","data","catch","err","console","log","source","CancelToken","AddReminder","props","fetchContacts","cancelToken","token","selectedContact","type","state","newContact","length","existingText","contacts","handleTextInput","input","name","addNewReminder","submitted","title","moreInfo","frequency","Intl","DateTimeFormat","resolvedOptions","timeZone","reminderTime","undefined","reminderID","addNewContact","addContact","frequencyOpts","newContactImg","timeOpts","this","more_info","reminder_time","cancel","View","style","flexDirection","alignItems","justifyContent","backgroundColor","height","Text","fontFamily","fontSize","TouchableOpacity","onPress","returnDash","styles","customButton","Feather","size","color","buttonText","editTitle","reminderItem","eachLabel","TextInput","onChangeText","value","defaultValue","placeholder","textStyle","inputStyle","selectedValue","picker","onValueChange","itemStyle","map","contact","i","Item","label","contact_name","key","marginTop","onClick","AntDesign","padding","buttonRow","Entypo","option","multiline","numberOfLines","rightSideRow","FontAwesome","React","Component","StyleSheet","create","flex","paddingVertical","borderRadius","paddingHorizontal","width","textAlign","marginVertical","borderColor","borderWidth","borderStyle","ReminderDetail","fetchReminder","reminder","selectedItemID","editing","contact_img","next_reminder","Image","uri","marginRight","substring","margin","titleText","page","fontWeight","AnimatedIcon","Animated","createAnimatedComponent","ReminderItem","renderRightActions","progress","dragX","interpolate","inputRange","outputRange","extrapolate","rightAction","closeSwipe","accessible","accessibilityRole","actionIcon","updateRef","ref","_swipeableRow","close","deleteSwipe","children","friction","rightThreshold","containerStyle","upcomingItem","swipeable","marginHorizontal","I18nManager","isRTL","shadowColor","shadowOffset","shadowOpacity","shadowRadius","ReminderList","fetchReminders","deleteItem","filter","item","filterList","today","Date","date","getFullYear","getMonth","getDate","filteredReminders","swiping","mode","reminderList","paddingTop","opacity","ScrollView","scrollEnabled","splitReminder","e","selectedItem","upcomingText","minHeight","Dashboard","display","topNav","paddingLeft","logoText","dash","paddingRight","App","useFonts","Rubik_400Regular","Rubik_500Medium","Rubik_700Bold","FredokaOne_400Regular"],"mappings":"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","file":"static/js/app.96fa0ae5.chunk.js","sourcesContent":["import axios from 'axios';\n\n/* deleteReminder */\nexport function deleteReminder(userID, id){\n  const formData = new FormData();\n  formData.append('userID', userID);\n  formData.append('id', id);\n\n  axios.post('https://kiipgrammar.com/klose/Reminder/deleteItem.php', formData)\n  .then(res=>{\n      this.setState({reminders: res.data});\n  }).catch(err =>{\n    console.log('Error!',err);\n  })\n}","import React from 'react';\nimport {View, Text, TextInput, TouchableOpacity,StyleSheet } from 'react-native';\nimport axios from 'axios';\nimport {Picker} from '@react-native-picker/picker';\nimport { Entypo } from '@expo/vector-icons';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { Feather } from '@expo/vector-icons';\n\nlet source = axios.CancelToken.source();\nexport default class AddReminder extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      addContact: false,\n      contacts: null,\n      frequency: 'Weekly',\n      frequencyOpts: ['Daily', 'Weekly', 'Monthly', 'Yearly'],\n      moreInfo: '',\n      newContact: '',\n      newContactImg: null,\n      reminderTime: '09:00',\n      selectedContact: '',\n      submitted: null,\n      timeOpts: ['06:00', '09:00', '12:00', '15:00', '18:00', '21:00'],\n      title: '',\n    }\n    source = axios.CancelToken.source();\n  }\n\n  componentDidMount(){\n    this.fetchContacts();\n    if(this.props.type === 'edit'){\n      this.setState({\n        frequency: this.props.existingText.frequency || 'Weekly',\n        moreInfo: this.props.existingText.more_info || '',\n        reminderTime:  this.props.existingText.reminder_time || '09:00',\n        selectedContact: this.props.existingText.id,\n        title: this.props.existingText.title,\n      })\n    }\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel any requests if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"AddReminder request was cancelled.\");\n    }\n  }\n\n  /**\n   * Fetch all the contacts for this user\n   * Preset the selectedContact depending on if editing / added new user\n   */\n  fetchContacts = ()=>{ \n    const formData = new FormData();\n    formData.append('userID', `josie1`); \n    axios.post('https://kiipgrammar.com/klose/Dashboard/fetchContacts.php', formData, {cancelToken: source.token})\n    .then(res=>{\n      let selectedContact = this.props.type === 'new' ? \n        this.state.newContact !== '' ?  res.data[res.data.length-1].id : res.data[0].id \n        : this.props.existingText.id;\n\n      this.setState({contacts: res.data, selectedContact});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n  \n  /**\n   * Insert text based on target name\n   * @param {*} input \n   * @param {*} name \n   */\n  handleTextInput = (input, name)=>{\n    this.setState({[name]: input});\n  }\n\n  /**\n   * Insert a new reminder into the database\n   */\n  addNewReminder = () =>{ \n    this.setState({submitted: false});\n\n    const formData = new FormData();\n    formData.append('userID', `josie1`);\n    formData.append('title', this.state.title);\n    formData.append('contactID', this.state.selectedContact);\n    formData.append('moreInfo', this.state.moreInfo);\n    formData.append('frequency', this.state.frequency);\n    formData.append('timezone', Intl.DateTimeFormat().resolvedOptions().timeZone);\n    formData.append('reminderTime', this.state.reminderTime);\n    formData.append('type', this.props.type);\n    formData.append('reminderID', this.props.reminderID !== undefined ? this.props.reminderID : '0');\n\n    axios.post('https://kiipgrammar.com/klose/Dashboard/addReminder.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({submitted: true});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Add new contact\n   * @returns \n   */\n   addNewContact = () => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`);\n    formData.append('contactName', this.state.newContact);\n\n    axios.post('https://kiipgrammar.com/klose/Dashboard/addContact.php', formData)\n    .then(res=>{\n        this.fetchContacts();\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n   }\n\n  render(){\n    if(this.state.submitted){\n      return (\n      <View style={{flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly', backgroundColor: '#e9e1d7', height: '100vh'}}>\n        <Text style={{fontFamily:'Rubik_700Bold', fontSize: 32}}>Reminder Added!</Text>\n        <TouchableOpacity \n          onPress={this.props.returnDash} \n          style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n        >\n          <Feather name=\"arrow-up-left\" size={24} color=\"black\" />\n          <Text style={[styles.buttonText, {color: '#000'}]}>See Reminders</Text>\n        </TouchableOpacity>\n      </View>\n      )\n      \n    } else{\n    return(\n      <View>\n        {this.props.type !== 'new' ? \n          <Text style={styles.editTitle}>Editing</Text>\n          : null\n        }\n        <View style={styles.reminderItem}>\n            <View style={{flexDirection: 'column'}}>\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>Title</Text>\n                <TextInput\n                  onChangeText={(value)=>{this.handleTextInput(value, 'title')}}\n                  defaultValue={this.state.title}\n                  placeholder='Reminder title'\n                  style={[styles.textStyle, styles.inputStyle]}\n                />\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>Who</Text>\n                <Picker\n                  selectedValue={this.state.selectedContact}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'selectedContact')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: 18}}\n                >\n                  {this.state.contacts !== null ?\n                    this.state.contacts.map((contact, i)=>{\n                      return (\n                        <Picker.Item \n                          label={contact.contact_name} \n                          value={contact.id} \n                          key={`indivContact${i}`}\n                        />\n                      )\n                    }) : null\n                  }\n                </Picker>\n                <View style={{flexDirection: 'row', marginTop: '5', alignItems: 'center'}} onClick={()=>{this.setState({addContact: !this.state.addContact})}}>\n                  <AntDesign name=\"caretdown\" size={15} color=\"#db644e\" />\n                  <Text style={{fontFamily:'Rubik_400Regular', fontSize: 15, color: '#db644e', padding: 5}}>Add Someone New?</Text>\n                </View>\n\n                {this.state.addContact ? \n                  <View style={styles.eachLabel}>\n                    <Text style={{fontFamily:'Rubik_700Bold', fontSize: 17}}>New Contact</Text>\n                    <TextInput\n                      onChangeText={(value)=>{this.handleTextInput(value, 'newContact')}}\n                      defaultValue={this.state.newContact}\n                      placeholder='Name'\n                      style={[styles.textStyle, styles.inputStyle]}\n                    />\n                    {/* <UploadImage \n                      getImgLink={(e)=>{this.setState({newContactImg: e})}}\n                    /> */}\n\n                    <View style={styles.buttonRow}>\n                      <TouchableOpacity \n                        onPress={this.addNewContact} \n                        style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n                      >\n                        <Entypo name=\"plus\" size={24} color=\"#000\" />\n                        <Text style={[styles.buttonText, {color: '#000'}]}>Save Contact</Text>\n                      </TouchableOpacity>\n                    </View>\n\n\n                  </View>\n                : null\n                }\n\n                \n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>How Often</Text>\n                <Picker\n                  selectedValue={this.state.frequency}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'frequency')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: 18}}\n                >\n                  {this.state.frequencyOpts.map((option, i)=>{\n                      return (\n                        <Picker.Item \n                          label={option} \n                          value={option} \n                          key={`indivFreq${i}`}\n                          style={{fontFamily:'Rubik_400Regular', fontSize: 18}}\n                        />\n                      )\n                    })\n                  }\n                </Picker>\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>When</Text>\n                <Picker\n                  selectedValue={this.state.reminderTime}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'reminderTime')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: 18}}\n                >\n                  {this.state.timeOpts.map((option, i)=>{\n                      return (\n                        <Picker.Item \n                          label={option} \n                          value={option} \n                          key={`indivTime${i}`}\n                          style={{fontFamily:'Rubik_400Regular', fontSize: 18}}\n                        />\n                      )\n                    })\n                  }\n                </Picker>\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>Note</Text>\n                <TextInput\n                  onChangeText={(value)=>{this.handleTextInput(value, 'moreInfo')}}\n                  defaultValue={this.state.moreInfo}\n                  placeholder='Add a note'\n                  style={[styles.textStyle, styles.inputStyle]}\n                  multiline\n                  numberOfLines={3}\n                />\n              </View>\n\n            </View>\n        </View>\n\n        <View style={styles.buttonRow}>\n         \n            <TouchableOpacity \n              onPress={this.addNewReminder} \n              style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n            >\n              \n              {this.props.type === 'new' ? \n              <>\n                <Entypo name=\"plus\" size={24} color=\"#000\" />\n                <Text style={[styles.buttonText, {color: '#000'}]}>Add Reminder</Text>\n              </> \n              :\n              <>\n                <Entypo name=\"save\" size={24} color=\"#000\" />\n                <Text style={[styles.buttonText, {color: '#000'}]}>Save Changes</Text>\n              </>}\n            </TouchableOpacity>\n           \n          \n        </View>\n\n        <View style={styles.rightSideRow}>\n          <TouchableOpacity \n            onPress={this.props.returnDash} \n            style={[styles.customButton, {backgroundColor: '#db644e'}]}\n          >\n            <FontAwesome name=\"times\" size={24} color=\"#fff\" />\n            <Text style={[styles.buttonText, {color: '#fff'}]}>Cancel</Text>\n          </TouchableOpacity>\n        </View>\n\n      </View>\n    ) }\n  }\n}\n\nconst styles = StyleSheet.create({\n  reminderItem: {\n    backgroundColor: '#e9e1d7',\n    flexDirection: 'row',\n    padding: 16\n  },\n  textStyle:{\n    fontFamily:'Rubik_400Regular',\n    marginTop: 6,\n    fontSize: 18\n  },\n  buttonRow: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    paddingVertical: 5,\n    backgroundColor: '#e9e1d7',\n  },\n  customButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 7,\n    paddingHorizontal: 13,\n  },\n  buttonText: {\n    fontFamily:'Rubik_500Medium',\n    fontSize: 20,\n    padding: 5\n  },\n  eachLabel: {\n    width: '100%',\n    textAlign: 'left',\n    marginVertical: 8\n  },\n  picker: {\n    marginTop: 10,\n    width: 300,\n    padding: 10,\n    backgroundColor: '#fff',\n    color: '#000',\n    borderColor: '#78b49b',\n    borderRadius: 4,\n    borderWidth: 1,\n    fontFamily:'Rubik_400Regular',\n    fontSize: 18\n  },\n  rightSideRow:{\n    padding: 16,\n    flex: 1,\n    alignItems: 'flex-end',\n    backgroundColor: '#e9e1d7',\n  },\n  inputStyle: {\n    borderWidth: 1,\n    borderColor: '#78b49b',\n    borderStyle: 'solid',\n    borderRadius: 4,\n    paddingHorizontal: 5,\n    backgroundColor: '#fff',\n    paddingVertical: 5,\n  },\n  editTitle: {\n    color: '#78b49b', \n    fontFamily:'Rubik_700Bold', \n    fontSize: 24, \n    textAlign: 'center',\n    marginTop: 5\n  }\n});","import React from 'react';\nimport {View, Text, Image, TouchableOpacity, StyleSheet} from 'react-native';\nimport axios from 'axios';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { Entypo } from '@expo/vector-icons';\nimport {deleteReminder} from '../Hooks/usefulFunctions';\nimport AddReminder from '../Dashboard/AddReminder';\n\nlet source = axios.CancelToken.source();\nexport default class ReminderDetail extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      editing: false,\n      reminder: {\n        title: '',\n        contact_name: '',\n        contact_img: '',\n        more_info: '',\n        frequency: '',\n        reminder_time: '',\n        next_reminder: ''\n      },\n    }\n    source = axios.CancelToken.source();\n  }\n\n  componentDidMount(){\n    this.fetchReminder(this.props.selectedItemID);\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel fetchReminder request if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"Reminder Item request was cancelled.\");\n    }\n  }\n\n  /**\n * Fetch this Reminder Item\n */\n  fetchReminder = (id) => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`); \n    formData.append('id', id);\n    axios.post('https://kiipgrammar.com/klose/Reminder/fetchIndivReminder.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({reminder: res.data});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Delete from database and return to Dashboard\n   */\n  deleteReminder = ()=>{\n    deleteReminder(`josie1`, this.props.selectedItemID);\n    this.props.returnDash();\n  }\n\n  render(){\n    if(this.state.editing){\n      return (\n        <View style={{backgroundColor: '#e9e1d7'}}>\n          <AddReminder \n            returnDash={this.props.returnDash}\n            type=\"edit\"\n            existingText={this.state.reminder}\n            reminderID={this.props.selectedItemID}\n          />\n        </View>\n      )\n    } else {\n      return(\n        <View style={{backgroundColor: '#e9e1d7', paddingVertical: 30, height: '90vh'}}>\n          <View style={styles.reminderItem}>\n            <Image\n              source={{uri: this.state.reminder.contact_img}}\n              style={{width: 100, height:100, borderRadius: 7, marginRight: 16}}\n            />\n            <View style={{flexDirection: 'column'}}>\n              <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>{this.state.reminder.title}</Text>\n              <Text style={styles.textStyle}>Who: {this.state.reminder.contact_name}</Text>\n              <Text style={styles.textStyle}>When: {this.state.reminder.next_reminder.substring(0, 10)}</Text>\n              <Text style={styles.textStyle}>How Often: {this.state.reminder.frequency}</Text>\n            </View>\n          </View>\n          \n          <View style={styles.reminderItem}>\n            <View style={{flexDirection: 'column'}}>\n              <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>Notes</Text>\n              <Text style={styles.textStyle}>{this.state.reminder.more_info}</Text>\n            </View>\n          </View>\n          \n  \n          <View style={styles.buttonRow}>\n            <TouchableOpacity \n              onPress={()=>{this.setState({editing: true})}} \n              style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n            >\n              <Entypo name=\"edit\" size={24} color=\"#000\" />\n              <Text style={[styles.buttonText, {color: '#000'}]}>Edit</Text>\n            </TouchableOpacity>\n  \n            <TouchableOpacity \n              onPress={this.deleteReminder} \n              style={[styles.customButton, {backgroundColor: '#db644e'}]}\n            >\n              <AntDesign name=\"delete\" size={24} color=\"#fff\" />\n              <Text style={[styles.buttonText, {color: '#fff'}]}>Delete</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )\n    }\n    \n  }\n}\n\nconst styles = StyleSheet.create({\n  reminderItem: {\n    flexDirection: 'row',\n    margin: 16\n  },\n  textStyle:{\n    fontFamily:'Rubik_400Regular',\n    marginTop: 6,\n    fontSize: 18\n  },\n  buttonRow: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center'\n  },\n  customButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 7,\n    paddingHorizontal: 13,\n  },\n  buttonText: {\n    fontFamily:'Rubik_500Medium',\n    fontSize: 20,\n    padding: 5\n  },\n\n});","import React from \"react\";\nimport {View, Text, StyleSheet} from \"react-native\";\n\nclass LandingView extends React.Component {\n    render(){\n        return(\n            <View>\n                <Text style={styles.titleText}>Klose</Text>\n                <Text>The best app to help you keep in touch.</Text>\n            </View>\n        );\n    }\n\n\n}\n\nconst styles = StyleSheet.create({\n    page: {\n        backgroundColor: \"#e9e1d7\",\n    },\n    titleText: {\n        color: \"#78b49b\",\n        fontFamily: \"Fredoka One\",\n        fontWeight: 600,\n        fontSize: 50,\n    },\n\n});\n\nexport default LandingView;","import React, { Component } from 'react';\nimport { Animated, StyleSheet, Text, View, I18nManager } from 'react-native';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { RectButton, Swipeable } from 'react-native-gesture-handler';\nconst AnimatedIcon = Animated.createAnimatedComponent(AntDesign);\n\n\nexport default class ReminderItem extends Component {\n\n  renderRightActions = (progress, dragX) => {\n    const scale = dragX.interpolate({\n      inputRange: [-80, 0],\n      outputRange: [1, 0],\n      extrapolate: 'clamp',\n    });\n    \n    return (\n      <RectButton style={styles.rightAction} onPress={this.closeSwipe}>\n        <View accessible accessibilityRole=\"button\">\n          <Text style={{color: '#db644e', fontFamily:'Rubik_500Medium', fontSize: 20}}>Delete</Text>\n        </View>\n        <AnimatedIcon\n          name=\"delete\"\n          size={30}\n          color=\"#db644e\"\n          style={[styles.actionIcon]}\n        />\n      </RectButton>\n    );\n   \n  };\n\n  updateRef = ref => {\n    this._swipeableRow = ref;\n  };\n\n  closeSwipe = () => {\n    this._swipeableRow.close();\n    this.props.deleteSwipe(this.props.reminderID)\n  };\n\n  render() {\n    const { children } = this.props;\n    return (\n      <Swipeable\n        ref={this.updateRef}\n        friction={2}\n        rightThreshold={41}\n        renderRightActions={this.renderRightActions}\n        containerStyle={this.props.upcomingItem  ? [styles.swipeable, styles.upcomingItem ] : styles.swipeable}\n      >\n        {children}\n      </Swipeable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  actionIcon: {\n    width: 30,\n    marginHorizontal: 10,\n  },\n  rightAction: {\n    alignItems: 'center',\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  swipeable:{\n    flex: 1,\n    backgroundColor: '#fff',\n    width: '90%',\n    padding: 16,\n    marginVertical: 16,\n    marginHorizontal: 16,\n    borderRadius: 7\n  },\n  upcomingItem:{\n    shadowColor: '#db644e',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.8,\n    shadowRadius: 1,\n  }\n});\n","import React from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity, ScrollView,Image } from 'react-native';\nimport axios from 'axios';\nimport ReminderItem from './ReminderItem';\nimport {deleteReminder} from '../Hooks/usefulFunctions';\n\nlet source = axios.CancelToken.source();\nclass ReminderList extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      reminders: null,\n      swiping: false,\n      filteredReminders: null,\n      filter: false\n    }\n    source = axios.CancelToken.source();\n  }\n  \n\n  componentDidMount(){\n    this.fetchReminders();\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel fetchReminders request if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"Reminder List request was cancelled.\");\n    }\n  }\n\n  /**\n   * Fetch Reminder Items\n   * TO DO:\n   * Add page limit, limit to 10 loading per time, \n   * Add fetch more on scroll\n   */\n   fetchReminders = () => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`); //This would be the userID \n    axios.post('https://kiipgrammar.com/klose/Dashboard/fetchReminders.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({reminders: res.data});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Delete items from list & hide in database\n   */\n  deleteItem = (id) => {\n    const reminders = this.state.reminders.filter(item => {\n      return item.id !== id;\n    });\n    this.setState({ reminders });\n    deleteReminder(`josie1`, id);\n  }\n\n  filterList = (type) =>{\n    if(type ==='today'){\n      let today = new Date();\n      let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n      const filteredReminders = this.state.reminders.filter(item => {\n        let itemDate = item.next_reminder.substring(0, 10);\n        return itemDate === date;\n      });\n\n      this.setState({filteredReminders, filter: true})\n    } else {\n      this.setState({filteredReminders: null, filter: false})\n    }\n  }\n\n  render(){\n    let mode = this.state.filter ? this.state.filteredReminders : this.state.reminders;\n    return (\n      <View style={styles.reminderList}>\n        <View style={{flexDirection: 'row', justifyContent: 'space-evenly', paddingTop: 16}}>\n          <TouchableOpacity \n            onPress={()=>{this.filterList('all')}} \n            style={this.state.filter ? { opacity: '0.5'} : null}\n          >\n            <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20, color: '#db644e'}}>All</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity \n            onPress={()=>{this.filterList('today')}} \n            style={!this.state.filter ? { opacity: '0.5'} : null}\n          >\n            <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20, color: '#78b49b'}}>Today</Text>\n          </TouchableOpacity>\n         \n        </View>\n       \n        <ScrollView\n          scrollEnabled={!(this.state.swiping)}\n          >\n          {this.state.reminders === null ? null :\n            mode.map((reminder, i)=>{\n              let nextReminder = reminder.next_reminder;\n              let splitReminder = nextReminder.substring(0, 10);\n              let today = new Date();\n              let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n              let upcomingItem = splitReminder === date ? true : false;\n\n              return (\n                <ReminderItem \n                  key={`eachReminder${i}`}\n                  deleteSwipe={(e)=>{this.deleteItem(e)}}\n                  reminderID={reminder.id}\n                  upcomingItem={upcomingItem}\n                >\n                  <TouchableOpacity \n                    onPress={()=>{this.props.selectedItem(reminder.id)}} \n                    style={styles.reminderItem}\n                  >\n                    <Image\n                      source={{uri: reminder.contact_img}}\n                      style={{width: 75, height:75, borderRadius: 7, marginRight: 16}}\n                    />\n                    <View style={{flexDirection: 'column'}}>\n                      <Text style={{fontFamily:'Rubik_700Bold', fontSize: 20}}>{reminder.title}</Text>\n                      <Text style={{fontFamily:'Rubik_400Regular'}}>{reminder.contact_name}</Text>\n                      <Text style={[upcomingItem ? styles.upcomingText : {fontFamily:'Rubik_400Regular'}]}>When: {splitReminder}</Text>\n                    </View>\n\n\n                  </TouchableOpacity >\n                </ReminderItem>\n                \n              )\n            })\n          }\n        </ScrollView>\n        \n      </View>\n      \n    );\n  }\n \n}\n\nexport default ReminderList;\n\nconst styles = StyleSheet.create({\n  reminderList: {\n    backgroundColor: '#e9e1d7',\n    minHeight: '90vh',\n    paddingTop: 50,\n  },\n  reminderItem: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row'\n  },\n  upcomingText: {\n    color: '#db644e',\n    fontFamily: 'Rubik_500Medium'\n  }\n});","import React from 'react';\nimport {View, Button, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport ReminderDetail from '../Reminder/ReminderDetail';\nimport AddReminder from './AddReminder';\nimport LandingView from './LandingView';\nimport ReminderList from './ReminderList';\nimport { Octicons } from '@expo/vector-icons';\nimport { AntDesign } from '@expo/vector-icons';\n\nclass Dashboard extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      display: false,\n      selectedItemID: null,\n    }\n  }\n\n  selectedItem = (id)=>{\n    this.setState({display: 'detailView', selectedItemID: id})\n  }\n\n  render(){\n     if(this.state.display === 'addView'){\n      return (\n        <View>\n          <TouchableOpacity\n            onPress={()=>{this.setState({display: false})}}\n            style={styles.topNav}\n          >\n            <View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\n              <AntDesign name=\"arrowleft\" size={24} color=\"#fff\" />\n              <Text style={{color: '#fff', fontSize: 24, paddingLeft: 10}}>Dashboard</Text>\n            </View>\n            <Text style={styles.logoText}>Klose</Text>\n          </TouchableOpacity>\n          <AddReminder \n            returnDash={()=>{this.setState({display: false})}}\n            type=\"new\"\n          />\n      </View>\n      )\n    } else if(this.state.display === 'detailView'){\n      return (\n        <View style={{backgroundColor: '#e9e1d7'}}>\n          <TouchableOpacity\n            onPress={()=>{this.setState({display: false})}}\n            style={styles.topNav}\n          >\n            <View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\n              <AntDesign name=\"arrowleft\" size={24} color=\"#fff\" />\n              <Text style={{color: '#fff', fontSize: 24, paddingLeft: 10}}>Dashboard</Text>\n            </View>\n            <Text style={styles.logoText}>Klose</Text>\n          </TouchableOpacity>\n          <ReminderDetail \n            selectedItemID={this.state.selectedItemID} \n            returnDash={()=>{this.setState({display: false})}}\n          />\n        </View>\n      )\n    } else {\n      return (\n        <View style={styles.dash}>\n          {/* <LandingView /> */}\n          <TouchableOpacity\n            onPress={()=>{this.setState({display: 'addView'})}} \n            style={styles.topNav}\n          >\n            <Text style={styles.logoText}>Klose</Text>\n            <View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\n              <Text style={{color: '#fff', fontSize: 24, paddingRight: 10}}>Add</Text>\n              <AntDesign name=\"arrowright\" size={24} color=\"#fff\" />\n            </View>\n          </TouchableOpacity>\n          <ReminderList selectedItem={(e)=>{this.selectedItem(e)}}/>\n        </View>\n      )\n    } \n  }\n}\n\nexport default Dashboard;\n\nconst styles = StyleSheet.create({\n  topNav: {\n    backgroundColor: '#78b49b',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 25,\n  },\n  logoText: {\n    fontFamily: 'FredokaOne_400Regular', \n    color: '#fff', \n    fontSize: 30\n  }\n})\n","import React from 'react';\nimport { Text } from 'react-native';\nimport Dashboard from './src/components/Dashboard/Dashboard';\nimport {GestureHandlerRootView} from 'react-native-gesture-handler';\nimport {\n  useFonts,\n  Rubik_400Regular,\n  Rubik_500Medium,\n  Rubik_700Bold,\n} from '@expo-google-fonts/rubik';\nimport {\n  FredokaOne_400Regular,\n} from '@expo-google-fonts/fredoka-one';\n\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    Rubik_400Regular,\n    Rubik_500Medium,\n    Rubik_700Bold,\n    FredokaOne_400Regular\n  });\n\n  if (!fontsLoaded) {\n    return <Text> </Text>\n  } else {\n    return (\n      <GestureHandlerRootView><Dashboard /></GestureHandlerRootView>\n    );\n  }\n  \n}\n"],"sourceRoot":""}
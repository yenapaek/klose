{"version":3,"sources":["src/components/Hooks/usefulFunctions.js","src/components/Hooks/UploadImage.js","src/components/Dashboard/AddReminder.js","src/components/Reminder/ReminderDetail.js","src/components/Dashboard/ReminderItem.js","src/components/Dashboard/ReminderList.js","src/components/Dashboard/Dashboard.js","App.js"],"names":["deleteReminder","userID","id","formData","FormData","append","axios","post","then","res","setState","reminders","data","catch","err","console","log","StyleSheet","create","customButton","flexDirection","alignItems","justifyContent","borderRadius","paddingHorizontal","buttonText","fontFamily","fontSize","padding","source","CancelToken","AddReminder","props","fetchContacts","cancelToken","token","selectedContact","type","state","newContact","length","existingText","contacts","handleTextInput","input","name","addNewReminder","submitted","title","moreInfo","frequency","Intl","DateTimeFormat","resolvedOptions","timeZone","reminderTime","reminderID","addNewContact","addContact","frequencyOpts","newContactImg","timeOpts","this","more_info","reminder_time","cancel","View","style","styles","reminderItem","eachLabel","Text","TextInput","onChangeText","value","defaultValue","placeholder","textStyle","inputStyle","selectedValue","picker","onValueChange","itemStyle","map","contact","i","Item","label","contact_name","key","marginTop","onClick","AntDesign","size","color","buttonRow","TouchableOpacity","onPress","backgroundColor","Entypo","option","multiline","numberOfLines","rightSideRow","returnDash","FontAwesome","React","Component","margin","flex","marginVertical","width","textAlign","borderWidth","border","paddingVertical","ReminderDetail","fetchReminder","reminder","selectedItemID","editing","contact_img","next_reminder","editTitle","Image","uri","height","marginRight","substring","AnimatedIcon","Animated","createAnimatedComponent","ReminderItem","renderRightActions","progress","dragX","interpolate","inputRange","outputRange","extrapolate","rightAction","closeSwipe","accessible","accessibilityRole","actionIcon","updateRef","ref","_swipeableRow","close","deleteSwipe","children","friction","rightThreshold","containerStyle","swipeable","marginHorizontal","I18nManager","isRTL","ReminderList","fetchReminders","deleteItem","filter","item","swiping","reminderList","ScrollView","scrollEnabled","splitReminder","e","selectedItem","reminderItemSelect","Dashboard","display","Button","accessibilityLabel","btn","App","useFonts","Rubik_400Regular","Rubik_500Medium","Rubik_700Bold"],"mappings":"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","file":"static/js/app.b3889f3e.chunk.js","sourcesContent":["import axios from 'axios';\n\n/* deleteReminder */\nexport function deleteReminder(userID, id){\n  const formData = new FormData();\n  formData.append('userID', userID);\n  formData.append('id', id);\n\n  axios.post('https://kiipgrammar.com/klose/Reminder/deleteItem.php', formData)\n  .then(res=>{\n      this.setState({reminders: res.data});\n  }).catch(err =>{\n    console.log('Error!',err);\n  })\n}","import React, { useState, useEffect } from 'react';\nimport {  Image, View, Platform,StyleSheet,TouchableOpacity, Text } from 'react-native';\n// import * as ImagePicker from 'expo-image-picker';\nimport { AntDesign } from '@expo/vector-icons';\n\nexport default function ImagePickerExample(props) {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n    props.getImgLink(result)\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', marginTop: '0.3rem' }}>\n      <TouchableOpacity \n        onPress={pickImage} \n        style={[styles.customButton, {backgroundColor: '#b3cbcb'}]}\n      >\n        <AntDesign name=\"camera\" size={15} color=\"black\" />\n        <Text style={[styles.buttonText, {color: '#000'}]}>Choose Photo</Text>\n      </TouchableOpacity>\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  customButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '0.45rem',\n    paddingHorizontal: '0.8rem',\n  },\n  buttonText: {\n    fontFamily:'Rubik_500Medium',\n    fontSize: '15px',\n    padding: '0.3rem'\n  },\n\n\n});","import React from 'react';\nimport {View, Text, TextInput, TouchableOpacity,StyleSheet } from 'react-native';\nimport axios from 'axios';\nimport {Picker} from '@react-native-picker/picker';\nimport { Entypo } from '@expo/vector-icons';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\nimport UploadImage from '../Hooks/UploadImage';\n\nlet source = axios.CancelToken.source();\nexport default class AddReminder extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      addContact: false,\n      contacts: null,\n      frequency: 'Weekly',\n      frequencyOpts: ['Daily', 'Weekly', 'Monthly', 'Yearly'],\n      moreInfo: '',\n      newContact: '',\n      newContactImg: null,\n      reminderTime: '09:00',\n      selectedContact: '',\n      submitted: null,\n      timeOpts: ['06:00', '09:00', '12:00', '15:00', '18:00', '21:00'],\n      title: '',\n    }\n    source = axios.CancelToken.source();\n  }\n\n  componentDidMount(){\n    this.fetchContacts();\n    if(this.props.type === 'edit'){\n      this.setState({\n        frequency: this.props.existingText.frequency || 'Weekly',\n        moreInfo: this.props.existingText.more_info || '',\n        reminderTime:  this.props.existingText.reminder_time || '09:00',\n        selectedContact: this.props.existingText.id,\n        title: this.props.existingText.title,\n      })\n    }\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel any requests if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"AddReminder request was cancelled.\");\n    }\n  }\n\n  /**\n   * Fetch all the contacts for this user\n   * Preset the selectedContact depending on if editing / added new user\n   */\n  fetchContacts = ()=>{ \n    const formData = new FormData();\n    formData.append('userID', `josie1`); \n    axios.post('https://kiipgrammar.com/klose/Dashboard/fetchContacts.php', formData, {cancelToken: source.token})\n    .then(res=>{\n      let selectedContact = this.props.type === 'new' ? \n        this.state.newContact !== '' ?  res.data[res.data.length-1].id : res.data[0].id \n        : this.props.existingText.id;\n\n      this.setState({contacts: res.data, selectedContact});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n  \n  /**\n   * Insert text based on target name\n   * @param {*} input \n   * @param {*} name \n   */\n  handleTextInput = (input, name)=>{\n    this.setState({[name]: input});\n  }\n\n  /**\n   * Insert a new reminder into the database\n   */\n  addNewReminder = () =>{ \n    this.setState({submitted: false});\n\n    const formData = new FormData();\n    formData.append('userID', `josie1`);\n    formData.append('title', this.state.title);\n    formData.append('contactID', this.state.selectedContact);\n    formData.append('moreInfo', this.state.moreInfo);\n    formData.append('frequency', this.state.frequency);\n    formData.append('timezone', Intl.DateTimeFormat().resolvedOptions().timeZone);\n    formData.append('reminderTime', this.state.reminderTime);\n    formData.append('type', this.props.type);\n    formData.append('reminderID', this.props.reminderID);\n\n    axios.post('https://kiipgrammar.com/klose/Dashboard/addReminder.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({submitted: true});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Add new contact\n   * @returns \n   */\n   addNewContact = () => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`);\n    formData.append('contactName', this.state.newContact);\n\n    axios.post('https://kiipgrammar.com/klose/Dashboard/addContact.php', formData)\n    .then(res=>{\n        this.fetchContacts();\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n   }\n\n  render(){\n    return(\n      <View>\n        <View style={styles.reminderItem}>\n            <View style={{flexDirection: 'column'}}>\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>Title</Text>\n                <TextInput\n                  onChangeText={(value)=>{this.handleTextInput(value, 'title')}}\n                  defaultValue={this.state.title}\n                  placeholder='Reminder title'\n                  style={[styles.textStyle, styles.inputStyle]}\n                />\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>Who</Text>\n                <Picker\n                  selectedValue={this.state.selectedContact}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'selectedContact')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: '18px'}}\n                >\n                  {this.state.contacts !== null ?\n                    this.state.contacts.map((contact, i)=>{\n                      return (\n                        <Picker.Item \n                          label={contact.contact_name} \n                          value={contact.id} \n                          key={`indivContact${i}`}\n                        />\n                      )\n                    }) : null\n                  }\n                </Picker>\n                <View style={{flexDirection: 'row', marginTop: '5', alignItems: 'center'}} onClick={()=>{this.setState({addContact: !this.state.addContact})}}>\n                  <AntDesign name=\"caretdown\" size={15} color=\"#db644e\" />\n                  <Text style={{fontFamily:'Rubik_400Regular', fontSize: '15px', color: '#db644e', padding: 5}}>Add Someone New?</Text>\n                </View>\n\n                {this.state.addContact ? \n                  <View style={styles.eachLabel}>\n                    <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.1rem'}}>New Contact</Text>\n                    <TextInput\n                      onChangeText={(value)=>{this.handleTextInput(value, 'newContact')}}\n                      defaultValue={this.state.newContact}\n                      placeholder='Name'\n                      style={[styles.textStyle, styles.inputStyle]}\n                    />\n                    {/* <UploadImage \n                      getImgLink={(e)=>{this.setState({newContactImg: e})}}\n                    /> */}\n\n                    <View style={styles.buttonRow}>\n                      <TouchableOpacity \n                        onPress={this.addNewContact} \n                        style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n                      >\n                        <Entypo name=\"plus\" size={24} color=\"#000\" />\n                        <Text style={[styles.buttonText, {color: '#000'}]}>Save Contact</Text>\n                      </TouchableOpacity>\n                    </View>\n\n\n                  </View>\n                : null\n                }\n\n                \n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>How Often</Text>\n                <Picker\n                  selectedValue={this.state.frequency}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'frequency')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: '18px'}}\n                >\n                  {this.state.frequencyOpts.map((option, i)=>{\n                      return (\n                        <Picker.Item \n                          label={option} \n                          value={option} \n                          key={`indivFreq${i}`}\n                          style={{fontFamily:'Rubik_400Regular', fontSize: '18px'}}\n                        />\n                      )\n                    })\n                  }\n                </Picker>\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>When</Text>\n                <Picker\n                  selectedValue={this.state.reminderTime}\n                  style={styles.picker}\n                  onValueChange={(value)=>{this.handleTextInput(value, 'reminderTime')}}\n                  itemStyle={{fontFamily:'Rubik_400Regular', fontSize: '18px'}}\n                >\n                  {this.state.timeOpts.map((option, i)=>{\n                      return (\n                        <Picker.Item \n                          label={option} \n                          value={option} \n                          key={`indivTime${i}`}\n                          style={{fontFamily:'Rubik_400Regular', fontSize: '18px'}}\n                        />\n                      )\n                    })\n                  }\n                </Picker>\n              </View>\n\n              <View style={styles.eachLabel}>\n                <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>Note</Text>\n                <TextInput\n                  onChangeText={(value)=>{this.handleTextInput(value, 'moreInfo')}}\n                  defaultValue={this.state.moreInfo}\n                  placeholder='Add a note'\n                  style={[styles.textStyle, styles.inputStyle]}\n                  multiline\n                  numberOfLines={3}\n                />\n              </View>\n\n            </View>\n        </View>\n\n        <View style={styles.buttonRow}>\n         \n            <TouchableOpacity \n              onPress={this.addNewReminder} \n              style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n            >\n              \n              {this.props.type === 'new' ? \n              <>\n                <Entypo name=\"plus\" size={24} color=\"#000\" />\n                <Text style={[styles.buttonText, {color: '#000'}]}>Add Reminder</Text>\n              </> \n              :\n              <>\n                <Entypo name=\"save\" size={24} color=\"#000\" />\n                <Text style={[styles.buttonText, {color: '#000'}]}>Save Changes</Text>\n              </>}\n            </TouchableOpacity>\n           \n          \n        </View>\n\n        <View style={styles.rightSideRow}>\n          <TouchableOpacity \n            onPress={this.props.returnDash} \n            style={[styles.customButton, {backgroundColor: '#db644e'}]}\n          >\n            <FontAwesome name=\"times\" size={24} color=\"#fff\" />\n            <Text style={[styles.buttonText, {color: '#fff'}]}>Cancel</Text>\n          </TouchableOpacity>\n        </View>\n\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  reminderItem: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: '1rem'\n  },\n  textStyle:{\n    fontFamily:'Rubik_400Regular',\n    marginTop: '0.4rem',\n    fontSize: '18px'\n  },\n  buttonRow: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    marginVertical: '0.3rem',\n  },\n  customButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '0.45rem',\n    paddingHorizontal: '0.8rem',\n  },\n  buttonText: {\n    fontFamily:'Rubik_500Medium',\n    fontSize: '20px',\n    padding: '0.3rem'\n  },\n  eachLabel: {\n    width: '100%',\n    textAlign: 'left',\n    marginVertical: '0.5rem'\n  },\n  picker: {\n    marginTop: 10,\n    width: 300,\n    padding: 10,\n    backgroundColor: '#78b49b',\n    color: '#fff',\n    borderRadius: '0.25rem',\n    borderWidth: 0,\n    fontFamily:'Rubik_400Regular',\n    fontSize: '18px'\n  },\n  rightSideRow:{\n    padding: '1rem',\n    flex: 1,\n    alignItems: 'flex-end',\n  },\n  inputStyle: {\n    border: '1px solid #b3cbcb',\n    borderRadius: '0.25rem',\n    paddingHorizontal: '0.3rem',\n    paddingVertical: '0.2rem',\n  }\n});","import React from 'react';\nimport {View, Text, Image, TouchableOpacity, StyleSheet} from 'react-native';\nimport axios from 'axios';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { Entypo } from '@expo/vector-icons';\nimport {deleteReminder} from '../Hooks/usefulFunctions';\nimport AddReminder from '../Dashboard/AddReminder';\n\nlet source = axios.CancelToken.source();\nexport default class ReminderDetail extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      editing: false,\n      reminder: {\n        title: '',\n        contact_name: '',\n        contact_img: '',\n        more_info: '',\n        frequency: '',\n        reminder_time: '',\n        next_reminder: ''\n      },\n    }\n    source = axios.CancelToken.source();\n  }\n\n  componentDidMount(){\n    this.fetchReminder(this.props.selectedItemID);\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel fetchReminder request if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"Reminder Item request was cancelled.\");\n    }\n  }\n\n  /**\n * Fetch this Reminder Item\n */\n  fetchReminder = (id) => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`); \n    formData.append('id', id);\n    axios.post('https://kiipgrammar.com/klose/Reminder/fetchIndivReminder.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({reminder: res.data});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Delete from database and return to Dashboard\n   */\n  deleteReminder = ()=>{\n    deleteReminder(`josie1`, this.props.selectedItemID);\n    this.props.returnDash();\n  }\n\n  render(){\n    if(this.state.editing){\n      return (\n        <View>\n          <Text style={styles.editTitle}>Editing</Text>\n          <AddReminder \n            returnDash={this.props.returnDash}\n            type=\"edit\"\n            existingText={this.state.reminder}\n            reminderID={this.props.selectedItemID}\n          />\n        </View>\n      )\n    } else {\n      return(\n        <View>\n          <View style={styles.reminderItem}>\n            <Image\n              source={{uri: this.state.reminder.contact_img}}\n              style={{width: 100, height:100, borderRadius: '0.45rem', marginRight: '1rem'}}\n            />\n            <View style={{flexDirection: 'column'}}>\n              <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>{this.state.reminder.title}</Text>\n              <Text style={styles.textStyle}>Who: {this.state.reminder.contact_name}</Text>\n              <Text style={styles.textStyle}>When: {this.state.reminder.next_reminder.substring(0, 10)}</Text>\n              <Text style={styles.textStyle}>How Often: {this.state.reminder.frequency}</Text>\n            </View>\n          </View>\n          \n          <View style={styles.reminderItem}>\n            <View style={{flexDirection: 'column'}}>\n              <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>Notes</Text>\n              <Text style={styles.textStyle}>{this.state.reminder.more_info}</Text>\n            </View>\n          </View>\n          \n  \n          <View style={styles.buttonRow}>\n            <TouchableOpacity \n              onPress={()=>{this.setState({editing: true})}} \n              style={[styles.customButton, {backgroundColor: '#e4bb79'}]}\n            >\n              <Entypo name=\"edit\" size={24} color=\"#000\" />\n              <Text style={[styles.buttonText, {color: '#000'}]}>Edit</Text>\n            </TouchableOpacity>\n  \n            <TouchableOpacity \n              onPress={this.deleteReminder} \n              style={[styles.customButton, {backgroundColor: '#db644e'}]}\n            >\n              <AntDesign name=\"delete\" size={24} color=\"#fff\" />\n              <Text style={[styles.buttonText, {color: '#fff'}]}>Delete</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )\n    }\n    \n  }\n}\n\nconst styles = StyleSheet.create({\n  reminderItem: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: '1rem'\n  },\n  textStyle:{\n    fontFamily:'Rubik_400Regular',\n    marginTop: '0.4rem',\n    fontSize: '18px'\n  },\n  buttonRow: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n  customButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '0.45rem',\n    paddingHorizontal: '0.8rem',\n  },\n  buttonText: {\n    fontFamily:'Rubik_500Medium',\n    fontSize: '20px',\n    padding: '0.3rem'\n  },\n  editTitle: {\n    color: '#78b49b', \n    fontFamily:'Rubik_700Bold', \n    fontSize: '1.5rem', \n    textAlign: 'center',\n    marginTop: '0.3rem'\n  }\n});","import React, { Component } from 'react';\nimport { Animated, StyleSheet, Text, View, I18nManager } from 'react-native';\nimport { AntDesign  } from '@expo/vector-icons';\nimport { RectButton, Swipeable } from 'react-native-gesture-handler';\nconst AnimatedIcon = Animated.createAnimatedComponent(AntDesign);\n\n\nexport default class ReminderItem extends Component {\n\n  renderRightActions = (progress, dragX) => {\n    const scale = dragX.interpolate({\n      inputRange: [-80, 0],\n      outputRange: [1, 0],\n      extrapolate: 'clamp',\n    });\n    \n    return (\n      <RectButton style={styles.rightAction} onPress={this.closeSwipe}>\n        <View accessible accessibilityRole=\"button\">\n          <Text style={{color: '#db644e', fontFamily:'Rubik_500Medium', fontSize: '20px'}}>Delete</Text>\n        </View>\n        <AnimatedIcon\n          name=\"delete\"\n          size={30}\n          color=\"#db644e\"\n          style={[styles.actionIcon]}\n        />\n      </RectButton>\n    );\n   \n  };\n\n  updateRef = ref => {\n    this._swipeableRow = ref;\n  };\n\n  closeSwipe = () => {\n    this._swipeableRow.close();\n    this.props.deleteSwipe(this.props.reminderID)\n  };\n\n  render() {\n    const { children } = this.props;\n    return (\n      <Swipeable\n        ref={this.updateRef}\n        friction={2}\n        rightThreshold={41}\n        renderRightActions={this.renderRightActions}\n        containerStyle={styles.swipeable}\n      >\n        {children}\n      </Swipeable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  actionIcon: {\n    width: 30,\n    marginHorizontal: 10,\n  },\n  rightAction: {\n    alignItems: 'center',\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  swipeable:{\n    flex: 1,\n    backgroundColor: '#fff',\n    width: '90%',\n    padding: '1rem',\n    marginVertical: '1rem',\n    marginHorizontal: '1rem',\n    borderRadius: '0.45rem'\n  }\n});\n","import React from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity, ScrollView,Image } from 'react-native';\nimport axios from 'axios';\nimport ReminderItem from './ReminderItem';\nimport {deleteReminder} from '../Hooks/usefulFunctions';\n\nlet source = axios.CancelToken.source();\nclass ReminderList extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      reminders: null,\n      swiping: false\n    }\n    source = axios.CancelToken.source();\n  }\n  \n\n  componentDidMount(){\n    this.fetchReminders();\n  }\n\n  componentWillUnmount(){\n    /**\n     * Cancel fetchReminders request if the component is unmounted\n     */\n    if(source){\n      source.cancel(\"Reminder List request was cancelled.\");\n    }\n  }\n\n  /**\n   * Fetch Reminder Items\n   * TO DO:\n   * Add page limit, limit to 10 loading per time, \n   * Add fetch more on scroll\n   */\n   fetchReminders = () => {\n    const formData = new FormData();\n    formData.append('userID', `josie1`); //This would be the userID \n    axios.post('https://kiipgrammar.com/klose/Dashboard/fetchReminders.php', formData, {cancelToken: source.token})\n    .then(res=>{\n        this.setState({reminders: res.data});\n    }).catch(err =>{\n      console.log('Error!',err);\n    })\n  }\n\n  /**\n   * Delete items from list & hide in database\n   */\n  deleteItem = (id) => {\n    const reminders = this.state.reminders.filter(item => {\n      return item.id !== id;\n    });\n    this.setState({ reminders });\n    deleteReminder(`josie1`, id);\n  }\n\n  render(){\n    return (\n      <View style={styles.reminderList}>\n        <ScrollView\n          scrollEnabled={!(this.state.swiping)}\n          >\n          {this.state.reminders === null ? null :\n            this.state.reminders.map((reminder, i)=>{\n              let nextReminder = reminder.next_reminder;\n              let splitReminder = nextReminder.substring(0, 10);\n\n              return (\n                <ReminderItem \n                  key={`eachReminder${i}`}\n                  deleteSwipe={(e)=>{this.deleteItem(e)}}\n                  reminderID={reminder.id}\n                >\n                  <TouchableOpacity \n                    onPress={()=>{this.props.selectedItem(reminder.id)}} \n                    style={styles.reminderItem}\n                  >\n                    <Image\n                      source={{uri: reminder.contact_img}}\n                      style={{width: 75, height:75, borderRadius: '0.45rem', marginRight: '1rem'}}\n                    />\n                    <View style={{flexDirection: 'column'}}>\n                      <Text style={{fontFamily:'Rubik_700Bold', fontSize: '1.3rem'}}>{reminder.title}</Text>\n                      <Text style={{fontFamily:'Rubik_400Regular'}}>{reminder.contact_name}</Text>\n                      <Text style={{fontFamily:'Rubik_400Regular'}}>Next Reminder: {splitReminder}</Text>\n                    </View>\n\n\n                  </TouchableOpacity >\n                </ReminderItem>\n                \n              )\n            })\n          }\n        </ScrollView>\n        \n      </View>\n      \n    );\n  }\n \n}\n\nexport default ReminderList;\n\nconst styles = StyleSheet.create({\n  reminderList: {\n    backgroundColor: '#e9e1d7',\n  },\n  reminderItem: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row'\n  },\n  reminderItemSelect:{\n    border: '1px solid green'\n  }\n});","import React from 'react';\nimport {View, Button, Pressable, StyleSheet} from 'react-native';\nimport ReminderDetail from '../Reminder/ReminderDetail';\nimport AddReminder from './AddReminder';\n// import LandingView from './LandingView';\nimport ReminderList from './ReminderList';\n\nclass Dashboard extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      display: false,\n      selectedItemID: null,\n    }\n  }\n\n  selectedItem = (id)=>{\n    this.setState({display: 'detailView', selectedItemID: id})\n  }\n\n  render(){\n     if(this.state.display === 'addView'){\n      return (\n        <View>\n        <Button\n          title=\"< New Reminder\"\n          onPress={()=>{this.setState({display: false})}}\n          accessibilityLabel=\"Return to Dashboard\"\n        />\n        <AddReminder \n          returnDash={()=>{this.setState({display: false})}}\n          type=\"new\"\n        />\n      </View>\n      )\n    } else if(this.state.display === 'detailView'){\n      return (\n        <View>\n          <Button\n            title=\"< Reminder Detail\"\n            onPress={()=>{this.setState({display: false})}}\n            accessibilityLabel=\"Return to Dashboard\"\n          />\n          <ReminderDetail \n            selectedItemID={this.state.selectedItemID} \n            returnDash={()=>{this.setState({display: false})}}\n          />\n        </View>\n      )\n    } else {\n      return (\n        <View>\n          <Button\n            // style={styles.btn}\n            title=\"+ Add Reminder\"\n            onPress={()=>{\n              this.setState({display: 'addView'})\n            }}\n            accessibilityLabel=\"Add a new reminder\"\n          />\n          <ReminderList selectedItem={(e)=>{this.selectedItem(e)}}/>\n        </View>\n      )\n    } \n  }\n}\n\nconst styles = StyleSheet.create({\n  btn: {\n    backgroundColor: \"#78b49b\",\n    alignItems: \"center\",\n  },\n})\n\nexport default Dashboard;","import React from 'react';\nimport { Text } from 'react-native';\nimport Dashboard from './src/components/Dashboard/Dashboard';\nimport {GestureHandlerRootView} from 'react-native-gesture-handler';\nimport {\n  useFonts,\n  Rubik_400Regular,\n  Rubik_500Medium,\n  Rubik_700Bold,\n} from '@expo-google-fonts/rubik';\n\nexport default function App() {\n  let [fontsLoaded] = useFonts({\n    Rubik_400Regular,\n    Rubik_500Medium,\n    Rubik_700Bold,\n  });\n\n  if (!fontsLoaded) {\n    return <Text> </Text>\n  } else {\n    return (\n      <GestureHandlerRootView><Dashboard /></GestureHandlerRootView>\n    );\n  }\n  \n}\n"],"sourceRoot":""}